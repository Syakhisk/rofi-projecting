#!/bin/env python3

from pydymenu import rofi
from tempfile import gettempdir
import subprocess as sp
import yaml
import os

# {{{ Functions
def run (command):
    _out = sp.run(command, shell=True, stdout=sp.PIPE, stderr=sp.PIPE)
    return {
        'returncode': _out.returncode,
        'stdout': _out.stdout.decode().strip(),
        'stderr': _out.stderr.decode().strip()
    }

def notify(message, title='Projecting'):
    run(f"notify-send '{title}' '{message}'")

def log(message):
    notify(message)
    print(message)

def loadConfig(path):
    _f = open(path, 'r').read()
    return yaml.load(_f, Loader=yaml.FullLoader)
# }}}

# {{{ xdotool

def activateWindow(window_id):
    _o = run(f"xdotool windowactivate {window_id}")
    return _o['returncode'] == 0

def findWindowByName(name):
    wid = run(f"xdotool search --name '{name}'")['stdout']
    return wid

def findWindowByClass(className):
    wid = run(f"xdotool search --class '{className}'")['stdout']
    return wid
# }}}

# {{{ brotab
def listBrowserTabs():
    _o = run("brotab list")['stdout']
    return [x.split('\t') for x in _o.split('\n')]

def findBrowserTab(url):
    tabs = listBrowserTabs()

    """
        tabs = 
            ['1', 'Google', 'https://www.google.com'],
            ['2', 'YouTube', 'https://www.youtube.com'],
    """

    target = next((tab for tab in tabs if url in tab[2]), None)
    print(target)

    # for tab in tabs:
    #     if url == tab[2]:
    #         return {
    #             'id': tab[0],
    #             'title': tab[1],
    #             'url': tab[2]
    #         }

def activateBrowserTab(url):
    findBrowserTab(url)
    # target = findBrowserTab(url)
    # run(f"brotab activate {target['id']}")

# }}}

#{{{ Config file

homedir = os.getenv("HOME")
projectPath = os.getenv('XDG_CONFIG_HOME') or f"{homedir}/.config"
projectPath = f"{projectPath}/projecting"

# Create config directory if it doesn't exist
if not os.path.exists(projectPath):
    os.makedirs(projectPath)

# }}}

#{{{ Running project

# Create tmp file to store running project
tmp = gettempdir() + "/projecting.running"

# Check if there is a running project
# if it exist, read it
running = open(tmp, "r").read().strip() if os.path.exists(tmp) else None
runningPath = None

if not running:
    # list files in config directory that ends with .yaml or .yml
    projects = [f.split('.')[0] for f in os.listdir(projectPath) if f.endswith(".yml")]
    selected = rofi(projects, prompt="Start projecting:")
    if selected:
        running = selected
        open(tmp, "w").write(selected[0].strip())
else:
    runningPath = [f for f in os.listdir(projectPath) if f.startswith(running)]
    runningPath = f"{projectPath}/{runningPath[0]}"

# }}}

# {{{ Parsing Yaml Config
config = loadConfig(runningPath)

# check if key exists
keys = ["programs"]
for key in keys:
    if key not in config:
        log(f"Key '{key}' not found in config file")
        exit(1)
# }}}

programs = list(config['programs'].keys())
selectedProgram = rofi(programs, prompt="Pick a program: ")

if not selectedProgram:
    print("No program selected")
    exit(1)

selectedProgram = selectedProgram[0]
programConf = config['programs'][selectedProgram]
keys = list(programConf.keys())
wid = ''
browser = False

if 'browser' in keys:
    browser = True
    tab = findBrowserTab(programConf['browser']['url'])

elif 'name' in keys:
    wid = findWindowByName(programConf['name'])

elif 'class' in keys :
    wid = findWindowByClass(programConf['class'])

else:
    exit(1)

if wid:
    activateWindow(wid)
    log(f"Activated window {selectedProgram}")
elif browser:
    activateBrowserTab(tab)
    log(f"Activated browser tab {selectedProgram}")
else:
    log(f"Launching {selectedProgram}")
    # do we need to focus window?
    for cmd in programConf['commands']: run(cmd)


# print(programConf['name'])
# print(activateWindowByName(programConf['name']))

# vim:foldmethod=marker
