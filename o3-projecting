#!/bin/env python3

# import os
from os import path
import subprocess as sp
import yaml
from tempfile import gettempdir

def run(cmd, *args, check = False, input=None):
    ret = sp.run(cmd, *args, check=check, stdout=sp.PIPE, stderr=sp.PIPE, input=input, shell=True)

    return {
        'stdout': ret.stdout.decode(),
        'stderr': ret.stderr.decode(),
        'returncode': ret.returncode
    }

def main():


rofiSelectKeys = [
    '-kb-select-1', 'Super+j',
    '-kb-select-2', 'Super+k',
    '-kb-select-3', 'Super+l',
    '-kb-select-4', 'Super+semicolon',
    '-kb-select-5', 'Super+u',
    '-kb-select-6', 'Super+i',
    '-kb-select-7', 'Super+o',
    '-kb-select-8', 'Super+p',
    # '-kb-custom-1', 'Super+j',
    # '-kb-custom-2', 'Super+k',
    # '-kb-custom-3', 'Super+l',
    # '-kb-custom-4', 'Super+semicolon',
    # '-kb-custom-5', 'Super+u',
    # '-kb-custom-6', 'Super+i',
    # '-kb-custom-7', 'Super+o',
    # '-kb-custom-8', 'Super+p',
]

ROFI_SHOW_CMD = 'rofi -dmenu -no-cusrom -i -p Projecting'
PROJECTS_DIRECTORY = "/home/m42nk/Codes/Misc/rofi-projecting/projects"
PROJECT_EXTENSION = ".yaml"

# check running project

# store running project in a tmp file
tmpFile = path.join(gettempdir(), 'projecting-running-project')
runningProjectName = path.exists(tmpFile) and open(tmpFile).read().strip() or None

# if not exists show error
# {{{ Markup
# markup = """
# <span foreground="red" size="x-large">Blue text</span>
# """
# themeStr = """
# """
# run(["rofi", "-e", markup, "-markup", '-theme-str', themeStr])
# }}}
if not runningProjectName:
    run(["notify-send", "Projecting", "No Project is running"])
    print("No running project")
    exit(1)

projectPath = path.join(PROJECTS_DIRECTORY, runningProjectName + PROJECT_EXTENSION)

if not path.exists(projectPath):
    run(["notify-send", "Projecting", "Project not found"])
    print("Project not found")
    exit(1)

_f = open(projectPath, 'r').read()
config = yaml.load(_f, Loader=yaml.FullLoader)

programs = config['programs'].keys()
multiline = '\n'.join(programs).encode()

rofiOut = run(ROFI_SHOW_CMD, input=multiline)

if rofiOut['returncode'] != 0:
    print("No Action")
    exit(1)

choosenProgram = rofiOut['stdout'].strip()
programCfg = config['programs'][choosenProgram]

# if program is browser tab
if "browser" in programCfg.keys():
    tabs = run("brotab list")
    if tabs['returncode'] != 0:
        print("Something went wrong")
        exit(1)

    tabs = tabs["stdout"].split('\n')
    target = next((tab for tab in tabs if programCfg["browser"]["tab_name"] in tab), None)

    if not target:
        print("Tab not found, launching")
        run("xdg-open %s" % programCfg["browser"]["url"])
        exit(1)

    id = target.split('\t')[0]
    run("brotab activate %s" % id)

    xdtOut = run("xdotool search --name '%s'" % programCfg["browser"]["tab_name"])
    # handle error

    wid = xdtOut['stdout'].split('\n')[0]

    xdtOut = run("xdotool windowactivate --sync %s" % wid)
    # handle error

# else:
# findProgram = run("xdotool search --all --name '%s'" % format(programConfig["name"]))
# print(findProgram["stdout"])

# if programConfig["commands"] is None:
#     print("No Action")
#     exit(1)

# elif type(programConfig["commands"]) is list:
#     [run(cmd) for cmd in programConfig["commands"]]

# else:
#     run(programConfig["commands"])


# parse rofi output
# - if rofi output is empty, exit

## Launching or focus a window
# find choosen window and its selector 
# - if window is not found, launch it
# - edge case for firefox multiple instance
# - if window is found, focus it

if __name__ == "__main__":
    main()

# vim:foldmethod=marker
